// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UP
  DOWN
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  avatar   String
  username String @unique

  subreddit     Subreddit[]
  subscriptions Subscription[]
  posts         Post[]
  comments      Comment[]
  commentVote   CommentVote[]
  votes         Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subreddit {
  id   String @id @default(uuid())
  name String @unique

  creatorId String?
  Creator   User?   @relation(fields: [creatorId], references: [id])

  subscribers Subscription[]
  posts       Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  subredditId String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])

  @@id([userId, subredditId])
}

model Post {
  id      String @id @default(uuid())
  title   String
  content Json?

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  subredditId String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])

  comments Comment[]
  votes    Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id   String @id @default(uuid())
  text String @db.Text

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   VoteType

  @@id([userId, postId])
}

model CommentVote {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  type VoteType

  @@id([userId, commentId])
}
